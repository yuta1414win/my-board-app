#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('ЁЯЪА цЬмчХкуГЗуГЧуГнуВдхЙНуГБуВзуГГуВпщЦЛхзЛ...\n');

const checks = [
  {
    name: 'чТ░хвГхдЙцХ░уГЖуГ│уГЧуГмуГ╝уГИуБочв║шкН',
    check: () => fs.existsSync('env.production.template'),
    required: true,
  },
  {
    name: 'VercelшинхоЪуГХуВбуВдуГлуБочв║шкН',
    check: () => fs.existsSync('vercel.json'),
    required: true,
  },
  {
    name: 'Next.jsшинхоЪуГХуВбуВдуГлуБочв║шкН',
    check: () => fs.existsSync('next.config.ts'),
    required: true,
  },
  {
    name: 'TypeScriptшинхоЪуБочв║шкН',
    check: () => fs.existsSync('tsconfig.json'),
    required: true,
  },
  {
    name: 'уГСуГГуВ▒уГ╝уВ╕уГХуВбуВдуГлуБочв║шкН',
    check: () =>
      fs.existsSync('package.json') && fs.existsSync('package-lock.json'),
    required: true,
  },
  {
    name: 'ESLintшинхоЪуБочв║шкН',
    check: () => fs.existsSync('eslint.config.mjs'),
    required: true,
  },
  {
    name: 'JestшинхоЪуБочв║шкН',
    check: () => fs.existsSync('jest.config.js'),
    required: false,
  },
  {
    name: 'PlaywrightшинхоЪуБочв║шкН',
    check: () => fs.existsSync('playwright.config.js'),
    required: false,
  },
  {
    name: 'уГЯуГЙуГлуВжуВзуВвшинхоЪуБочв║шкН',
    check: () => fs.existsSync('middleware.ts'),
    required: true,
  },
  {
    name: 'шкНши╝шинхоЪуБочв║шкН',
    check: () => fs.existsSync('auth.config.ts') && fs.existsSync('auth.ts'),
    required: true,
  },
  {
    name: 'уГШуГлуВ╣уГБуВзуГГуВпуВиуГ│уГЙуГЭуВдуГ│уГИуБочв║шкН',
    check: () => fs.existsSync('app/api/health/route.ts'),
    required: true,
  },
];

const securityChecks = [
  {
    name: '.env.local уБМgitignoreуБХуВМуБжуБДуВЛуБЛ',
    check: () => {
      if (!fs.existsSync('.gitignore')) return false;
      const gitignore = fs.readFileSync('.gitignore', 'utf8');
      return gitignore.includes('.env.local') || gitignore.includes('.env*');
    },
    required: true,
  },
  {
    name: 'node_modules уБМgitignoreуБХуВМуБжуБДуВЛуБЛ',
    check: () => {
      if (!fs.existsSync('.gitignore')) return false;
      const gitignore = fs.readFileSync('.gitignore', 'utf8');
      return gitignore.includes('node_modules');
    },
    required: true,
  },
];

const buildChecks = [
  {
    name: 'TypeScriptхЮЛуГБуВзуГГуВп',
    check: () => {
      try {
        require('child_process').execSync('npx tsc --noEmit', {
          stdio: 'ignore',
        });
        return true;
      } catch {
        return false;
      }
    },
    required: true,
  },
  {
    name: 'ESLint уГБуВзуГГуВп',
    check: () => {
      try {
        require('child_process').execSync('npm run lint', { stdio: 'ignore' });
        return true;
      } catch {
        return false;
      }
    },
    required: true,
  },
];

let allPassed = true;
let warnings = 0;

// хЯ║цЬмуГБуВзуГГуВп
console.log('ЁЯУБ уГХуВбуВдуГлцзЛцИРуГБуВзуГГуВп:');
checks.forEach(({ name, check, required }) => {
  const passed = check();
  const symbol = passed ? 'тЬЕ' : required ? 'тЭМ' : 'тЪая╕П';
  const status = passed ? 'OK' : required ? 'FAILED' : 'WARNING';

  console.log(`  ${symbol} ${name}: ${status}`);

  if (!passed && required) {
    allPassed = false;
  } else if (!passed) {
    warnings++;
  }
});

console.log('\nЁЯФТ уВ╗уВнуГеуГкуГЖуВгуГБуВзуГГуВп:');
securityChecks.forEach(({ name, check, required }) => {
  const passed = check();
  const symbol = passed ? 'тЬЕ' : 'тЭМ';
  const status = passed ? 'OK' : 'FAILED';

  console.log(`  ${symbol} ${name}: ${status}`);

  if (!passed && required) {
    allPassed = false;
  }
});

console.log('\nЁЯФи уГУуГлуГЙуГБуВзуГГуВп:');
buildChecks.forEach(({ name, check, required }) => {
  const passed = check();
  const symbol = passed ? 'тЬЕ' : 'тЭМ';
  const status = passed ? 'OK' : 'FAILED';

  console.log(`  ${symbol} ${name}: ${status}`);

  if (!passed && required) {
    allPassed = false;
  }
});

console.log('\nЁЯУЛ уГЗуГЧуГнуВдц║ЦхВЩчК╢ц│Б:');
if (allPassed) {
  console.log('тЬЕ уБЩуБ╣уБжуБох┐ЕщаИуГБуВзуГГуВпуБлхРИца╝уБЧуБ╛уБЧуБЯя╝Б');
  if (warnings > 0) {
    console.log(`тЪая╕П  ${warnings}хАЛуБошнжхСКуБМуБВуВКуБ╛уБЩя╝ИуВкуГЧуВ╖уГзуГ│щаЕчЫоя╝Й`);
  }
  console.log('\nЁЯЪА цЬмчХкуГЗуГЧуГнуВдуБоц║ЦхВЩуБМцХ┤уБДуБ╛уБЧуБЯуАВ');
  console.log('\nцмбуБоуВ╣уГЖуГГуГЧ:');
  console.log('1. env.production.template уВТхПВшАГуБл Vercel уБзчТ░хвГхдЙцХ░уВТшинхоЪ');
  console.log('2. MongoDB Atlas уБзцЬмчХкуВпуГйуВ╣уВ┐уГ╝уВТшинхоЪ');
  console.log('3. уГбуГ╝уГлщАБф┐буВ╡уГ╝уГУуВ╣я╝ИResendя╝ЙуВТшинхоЪ');
  console.log('4. vercel --prod уБзуГЗуГЧуГнуВдхоЯшбМ');
} else {
  console.log('тЭМ уБДуБПуБдуБЛуБох┐ЕщаИщаЕчЫоуБзуВиуГйуГ╝уБМчЩ║чФЯуБЧуБжуБДуБ╛уБЩуАВ');
  console.log('ф╕КшиШуБоуВиуГйуГ╝уВТф┐оцнгуБЧуБжуБЛуВЙхЖНхоЯшбМуБЧуБжуБПуБауБХуБДуАВ');
  process.exit(1);
}

console.log('\nтП▒я╕П  уГБуВзуГГуВпхоМф║Ж');
